geom_point
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
library(ggplot2)
ggplot(output, aes(x=x, y=y)) +
geom_point
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
library(ggplot2)
ggplot(x, aes(x=x, y=y)) +
geom_point
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
print(a1)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
print(a1)
a2 <- logL(a=2, x=x, y=y)
print(a2)
a3 <- logL(a=0.1, x=x, y=y)
print(a3)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
print(a1)
a2 <- logL(a=2, x=x, y=y)
print(a2)
a3 <- logL(a=0.1, x=x, y=y)
print(a3)
# 5000 random values of x and histogram
x <- runif(n=5000, min=0, max=10000)
hist(x)
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
plot(x,y)
# 5000 random values of x and histogram
x <- runif(n=5000, min=0, max=10000)
hist(x)
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
print(a1)
a2 <- logL(a=2, x=x, y=y)
print(a2)
a3 <- logL(a=0.1,x=x, y=y)
print(a3)
# 5000 random values of x and histogram
x <- runif(n=5000, min=0, max=100)
hist(x)
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
print(a1)
a2 <- logL(a=2, x=x, y=y)
print(a2)
a3 <- logL(a=0.1,x=x, y=y)
print(a3)
# 5000 random values of x and histogram
x <- runif(n=5000, min=0, max=1)
hist(x)
# put x values into linear model
a <- 0.2
output = function(a,x){
y = -1 + a*x
return(y)
}
y <- output(x=x, a=0.2)
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
a1 <- logL(a=-2, x=x, y=y)
print(a1)
a2 <- logL(a=2, x=x, y=y)
print(a2)
a3 <- logL(a=0.1,x=x, y=y)
print(a3)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
for(a.sequence)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
for(a in a.values) {
logL(a=a, x=x, y=y)
}
View(logL)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
for(a in a.values) {
logL(a=a, x=x, y=y)
}
a.values = seq(-2,2,0.1)
a.values = seq(-2,2,0.1)
a.values = seq(-2,2,0.1)
print(a.values)
for(a in a.values) {
logL(a=a, x=x, y=y)
pring(logL)
}
for(a in a.values) {
logL(a=a, x=x, y=y)
print(logL)
}
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
}
length(a.values)
length(output)
logoutput <- numeric()
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
print(logoutput)
logoutput
plot(a, x, y)
plot(a.values, logoutput)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
length(a.values)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
?optim
optim(par=0, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
$value
optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print(value)
optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print($value)
result <- value$optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
result <- optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
View(result)
mleresult <- optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print(value$mleresult)
mleresult <- optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print(mleresult$value)
mleresult <- optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print(mleresult$value)
# generate 5000 random values of x and create histogram
x <- runif(n=5000, min=0, max=1000)
hist(x)
# linear model function
output = function(a,x){
y = -1 + a*x
return(y)
}
# generate y values from x values using function
y <- output(x=x, a=0.2)
# plot of x vs y
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
optim(par=0, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
mleresult <- optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print(mleresult$value)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
knitr::opts_chunk$set(echo = TRUE)
# produce matrix A
matrixA <- matrix(c(4,5,-1,2,2,1,5,-3,2,2,1,3), nrow=4, ncol=3)
# produce matrix B
matrixB <- matrix(c(2,4,1,3,1,1,1,-3,-1,3,1,1), nrow=3, ncol=4)
# matrix multiplication
matrixC <- matrixA %*% matrixB
# resulting matrix C
print(matrixC)
# while loop
v <- 10
while(15 - v > 0.1)
{
v <- v + runif(n=1, min=0, max=1)
print(v)
}
# generate 5000 random values of x and create histogram
x <- runif(n=5000, min=0, max=1000)
hist(x)
# linear model function
output = function(a,x){
y = -1 + a*x
return(y)
}
# generate y values from x values using function
y <- output(x=x, a=0.2)
# plot of x vs y
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
a.values = seq(-2,2,0.1)
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
logoutput <- numeric()
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
plot(a.values, logoutput)
L function output
plot(a.values, logoutput)
# produce matrix A
matrixA <- matrix(c(4,5,-1,2,2,1,5,-3,2,2,1,3), nrow=4, ncol=3)
# produce matrix B
matrixB <- matrix(c(2,4,1,3,1,1,1,-3,-1,3,1,1), nrow=3, ncol=4)
# matrix multiplication
matrixC <- matrixA %*% matrixB
# resulting matrix C
print(matrixC)
# while loop
v <- 10
while(15 - v > 0.1)
{
v <- v + runif(n=1, min=0, max=1)
print(v)
}
# generate 5000 random values of x and create histogram
x <- runif(n=5000, min=0, max=1000)
hist(x)
# linear model function
output = function(a,x){
y = -1 + a*x
return(y)
}
# generate y values from x values using function
y <- output(x=x, a=0.2)
# plot of x vs y
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
# plot of a values vs logL function output
plot(a.values, logoutput)
optim(par=0, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
mleresult <- optim(par=0.5, logL, x=x, y=y,method = "L-BFGS-B",control = list(fnscale=-1))
print(mleresult$value)
logoutput
# generate 5000 random values of x and create histogram
x <- runif(n=5000, min=0, max=100)
hist(x)
# linear model function
output = function(a,x){
y = -1 + a*x
return(y)
}
# generate y values from x values using function
y <- output(x=x, a=0.2)
# plot of x vs y
plot(x,y)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
logoutput
# plot of a values vs logL function output
plot(a.values, logoutput)
# the range of the model parameter value to be considered
a.values = seq(-2,2,0.1)
# log likelihood function
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
# create an empty vector to store output of for loop
logoutput <- numeric()
# for loop to input all a values in function logL
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
logoutput
# plot of a values vs logL function output
plot(a.values, logoutput)
a.values
logL = function(a, x, y){
sigma = 1
500*log(1/(sqrt(2*pi)*sigma)) - 1/((sigma^2)*(1/2)*sum((a*x - y)^2))
}
logoutput <- numeric()
for(a in a.values) {
output <- logL(a=a, x=x, y=y)
logoutput <- c(logoutput, output)
}
logoutput
plot(a.values, logoutput)
